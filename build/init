#!/bin/bash
#
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Default behavior if install succeed
ONSUCCESS="reboot"
ONFAILURE="halt"
VERBOSE=0

. init.common
exec 3>&1
exec 4>&2

exec > /log 2>&1

tail -f /log > /dev/console &
tpid=$!


################################################################################

set_path

step "Create directories"
create_main_directories
rm -rf /var/lock
mkdir -p /var/lock

step "Mounting virtual fs"
mount_virtual_fs

eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^DEBUG=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^VERBOSE=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^NOREBOOT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^ONSUCCESS=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^ONFAILURE=")

#compatibilty module
if [ "$NOREBOOT" = "1" ]; then
    log "NOREBOOT option is deprecated, please use ONSUCCESS='kexec'"
    ONSUCCESS="kexec"
fi

if [[ "$DEBUG" = "1" ]]; then
  log "DEBUG param deprecated, please use ONFAILURE=console"
  ONFAILURE="console"
fi

if [ "$VERBOSE" = 1 ]; then
    set -x			# show commands
fi

grep -q '\<quiet\>' /proc/cmdline || log "Loading, please wait..."

step "Starting services"
if [ -x /etc/init.d/sysklogd ]; then
    /etc/init.d/sysklogd start
fi

if [ -x /etc/init.d/klogd ]; then
    /etc/init.d/klogd start
fi

# It's all over netlink now
echo "" > /proc/sys/kernel/hotplug

step "Start Udev"
# Start the udev daemon to process events
/sbin/udevd --daemon --resolve-names=never

# Iterate sysfs and fire off everything; if we include a rule for it then
# it'll get handled; otherwise it'll get handled later when we do this again
# in the main boot sequence.
( /sbin/udevadm trigger --action=add --subsystem-match=block; \
    /sbin/udevadm trigger --action=add --subsystem-nomatch=block; ) &

################################################################################
# Use the system tag to find the role
################################################################################
serial="$(dmidecode -s system-serial-number)"

################################################################################
# Hardware detection starts here
################################################################################

probe_pci_devices

step "Starting networking"

if [ "$DEBUG" = 1 ]; then
    start_ssh_server
fi

probe_network_devices

ip a

# This is the default value for both SERV & RSERV
SERV=10.0.0.1
HSERV=
HSERV_PORT=80
RSERV=
RSERV_PORT=873
HTTP_PORT=80
HTTP_PATH=/cgi-bin/

# Unless you override one or the other via the cmdline
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PATH=")

if [ -z "$RSERV" ]; then
    RSERV="$SERV"
fi

################################################################################
step "Detecting hardware"

cd /
./detect.py > /hw.py

show_kernel_modules
################################################################################
# Send the detected hardware to the server and receive a configuration script
# if there is a match on the server else stop.
################################################################################

show_git_rev

step "Configuring system via server ${SERV}"
curl -s -S -o/configure -F file=@/hw.py http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py &
# Saving curl's PID
PID="$!"

log_n "Awaiting eDeploy server :"
while [ ! -z "$(pidof curl)" ]; do
    log_n "."
    sleep 1
done
log "done"

# Let's grab curl's return code based on it's pid
wait $PID
RET_CODE=$?
if [ "$RET_CODE" != "0" ]; then
    give_up "Curl exited as failed ($RET_CODE). Cannot get a configuration from http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py'"
fi

if [ ! -f /configure ]; then
    give_up "edeploy server ${SERV} didn't provide any answer, looks like something is wrong on server side !"
fi

chmod +x /configure

d=/chroot
p=/post_rsync

mkdir -p $d
mkdir -p $p/etc/{init,network,default}

if /configure; then

    . /vars

    if [ -n "$ROLE" -a -n "$VERS" ]; then
        log "Deploying role '$ROLE' version '$VERS' on disk '$DISK' @ $(date)"
        if [ -n "$HSERV" ]; then
            log_n "Transferring files from http://${HSERV}:${HSERV_PORT}/install/${VERS}/${ROLE}-${VERS}.edeploy..."
            curl -s -S http://${HSERV}:${HSERV_PORT}/install/${VERS}/${ROLE}-${VERS}.edeploy | gzip -d | tar x -C $d || give_up "Unable to download http://${HSERV}:${HSERV_PORT}/install/${VERS}/${ROLE}-${VERS}.edeploy"
        else
            log_n "Copying files from rsync://${RSERV}:${RSERV_PORT}/install/${VERS}/${ROLE}..."
            rsync -a rsync://${RSERV}:${RSERV_PORT}/install/${VERS}/${ROLE}/ $d/ || give_up "Unable to rsync rsync://${RSERV}:${RSERV_PORT}/install/${VERS}/${ROLE}/"
        fi
        echo "SERV=${SERV}" >> $d/var/lib/edeploy/conf
        echo "RSERV=${RSERV}" >> $d/var/lib/edeploy/conf
        echo "RSERV_PORT=${RSERV_PORT}" >> $d/var/lib/edeploy/conf
        sed -i "s/ROLE=.*/ROLE=${ROLE}/" $d/var/lib/edeploy/conf
        sed -i "s/Role .*/Role ${ROLE}/" $d/etc/motd
        log "done"

        log "Installing post_rsync files"
        rsync -avHP $p/* $d/

        if [ -r /modules ]; then
            cat /modules >> $d/etc/modules
        fi

        if [ -n "${METADATA_URL}" ]; then
            log "Setting up cloudinit with METADATAURL=$METADATA_URL"
            sed -i -e "s@GRUB_CMDLINE_LINUX_DEFAULT=\"\(.*\)\"@GRUB_CMDLINE_LINUX_DEFAULT=\"\1 ds=nocloud-net\\\\;s=${METADATA_URL}\"@" $d/etc/default/grub
            BOOT_ARG="$BOOT_ARG ds=nocloud-net;s=${METADATA_URL}"
        else
            log "No METADATA_URL variable found, no cloud-init configuration done"
        fi

        mount -obind /dev $d/dev
        mount -obind /proc $d/proc
        mount -obind /sys $d/sys

        if [ -d $d/var/log ]; then
            cp -p /log $d/var/log/install.log
            cp -p /vars /hw.py $d/var/log/
        fi

        # If the disk name doesn't have any /dev/ naming let's add it
        echo "$DISK" | grep '^/dev/' || DISK="/dev/$DISK"
        export DISK
        DISK_BASE=$(basename $DISK)
        SER=$(cat /sys/block/$DISK_BASE/device/rev)
        MODEL=$(cat /sys/block/$DISK_BASE/device/model)
        VENDOR=$(cat /sys/block/$DISK_BASE/device/vendor)
        echo  "################################################################################################"
        echo  "# Installing grub on device ${DISK} which is a $MODEL from $VENDOR with SN=$SER"
        echo  "################################################################################################"
        # grub1 doesn't have /usr/sbin/grub-mkconfig
        if [ ! -x $d/usr/sbin/grub-mkconfig ]; then
            chroot $d /bin/sh -c "cat /proc/mounts > /etc/mtab"
            chroot $d /bin/sh -c "/sbin/grub-install ${DISK}"
            rm -f $d/etc/mtab

            ret=$?
            root=`mount | grep "$d " | awk '{print $1}'`
            eval `blkid $root -o export`
            echo "default=0"  > ${d}/boot/grub/grub.conf
            echo "timeout=5" >> ${d}/boot/grub/grub.conf
            echo "hiddenmenu">> ${d}/boot/grub/grub.conf
            DEFAULT_BOOT_PARTITION=0

            # Does /boot have a separate partition ?
            mountpoint -q ${d}/boot
            NO_BOOT_MOUNTPOINT=$?
            # Yes it's split, so let's compute its partition number for grub
            if [ $NO_BOOT_MOUNTPOINT -eq 0 ]; then
                PART_NUM=$(basename $(grep "${d}/boot" /proc/mounts  | awk '{print $1}')| sed -e 's/[a-z]*\(.*\)/\1/g')
                DEFAULT_BOOT_PARTITION=$(($PART_NUM - 1))
            fi

            DISTRO_NAME=$(chroot $d lsb_release -d |  awk '{ print substr($0, index($0,$2)) }')
            for kernel in ${d}/boot/vmlinuz-*; do
                kversion=`echo $kernel | awk -F'vmlinuz-' '{print $NF}'`;
                # If /boot is splitted, we shall not prefix with /boot
                if [ $NO_BOOT_MOUNTPOINT -eq 0 ]; then
                    KERNEL="/vmlinuz-${kversion}"
                    INITRD="/initramfs-${kversion}.img"
                else
                    KERNEL="/boot/vmlinuz-${kversion}"
                    INITRD="/boot/initramfs-${kversion}.img"
                fi
                TITLE="$DISTRO_NAME (${kversion})"
                echo "title $TITLE" >> ${d}/boot/grub/grub.conf
                echo "	root (hd0,$DEFAULT_BOOT_PARTITION)" >> ${d}/boot/grub/grub.conf
                echo "	kernel $KERNEL root=UUID=$UUID nomodeset rw $BOOT_ARG" >> ${d}/boot/grub/grub.conf
                echo "	initrd $INITRD" >> ${d}/boot/grub/grub.conf
            done
            # grub 2
        elif chroot $d /bin/sh -c "/usr/sbin/grub-install ${DISK}"; then
            chroot $d /bin/sh -c "/usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg"
            ret=$?
        else
            ret=1
        fi

        # Bootloader successfully installed
        if [ $ret -eq 0 ]; then
            umount $d/sys
            umount $d/dev
            umount $d/proc
            save_log
            sync

            if [ -n "$PXEMNGR_URL" ]; then
                curl -s ${PXEMNGR_URL}localboot/
            fi

            case "$ONSUCCESS" in
                "kexec")
                    log "Booting with kexec as required by ONSUCCESS"
                    if type -p kexec; then
                        log_n "Trying kexec..."
                        cp $d/boot/vmlinuz* /tmp/vmlinuz || give_up "Unable to copy kernel"
			if ls $d/boot/initrd.img*; then
			    cp $d/boot/initrd.img* /tmp/initrd.img || give_up "Unable to copy initrd"
			else
			    cp $d/boot/initramfs* /tmp/initrd.img || give_up "Unable to copy initrd"
			fi
                        eval $(grep root=UUID= $d/boot/grub/grub.cfg|head -1|tr ' ' '\n'|grep '^root=UUID=')
                        if [ -z "$root" ]; then
                            log_n "using alternative root detection"
                            root=$(grep 'root=' $d/boot/grub/grub.cfg | grep vmlinuz | head -1 | sed -e 's/.*root=\(.*\)/\1/g' | awk '{print $1}')
                        fi
                        umount $d/boot
                        umount $d
                        log "."
                        if [ -z "$root" ]; then
                            log "unable to detect root device"
                            give_up "kexec will not be executed"
                            sleep 5
                        else
                            log "About to run kexec with append=root=${root}${BOOT_ARG}"
                            upload_log
                            kexec -l /tmp/vmlinuz --initrd=/tmp/initrd.img --append="root=${root}${BOOT_ARG}"
                            kexec -e
                        fi
                    else
                        give_up "ONSUCCESS=kexec but no kexec found !"
                    fi
                    ;;
                "reboot")
                    log "Automatic rebooting as required by ONSUCCESS"
                    umount -a
                    do_reboot
                    ;;
                "halt")
                    log "Automatic poweroff as required by ONSUCCESS"
                    umount -a
                    do_halt
                    ;;
                "console")
                    log "ONSUCCESS=console, launching an interactive shell"
                    do_console
                    ;;
                *)
                    give_up "Unsupported ONSUCCESS=$ONSUCCESS value"
                    ;;
            esac
        else
            give_up "Install of grub failed"
        fi
    else
        give_up "No role or version defined..."
    fi
else
    grep '<!-- ' /configure -A 40 >> /log
    give_up "Problem during system configuration"
fi
